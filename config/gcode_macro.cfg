# Q1_Pro
# V4.4.16 2024-3-14
# update: variable change M106 & M141 & M107
# V4.4.16 2024-3-26
# update: variable change [homing_override]->add M204 S10000
# V4.4.18mod 2024-4-14
# modify: move purging actions to bucket, including filament load/unload
#         increase chamber temperature limit to 70
#         redid the whole nozzle cleaning routine, uses the whole felt pad uniformly for better longevity
# V4.4.20 2024-6-17
# update: Z_DOUDONG CLEAR_NOZZLE get_zoffset rewrite
#         move_subzoffset added 
# V4.4.21 2024-6-22
# update: Enable chamber exhaust fan by default when chamber temp not set
# V4.4.21mod
# update: updated to v4.4.21

[gcode_macro JRYMK_MOD_VARIABLES]
variable_nozzle_probing_temperature: 150  # temperature of the nozzle when probing the bed. Less than 180 recommended to prevent bed plate damage. If you print PLA and there is ooze when probing, you might want to drop it even lower, to say 120.
# variable_quick_start_enable: 1            # enable quick suscessive printing feature, requires probing the whole bed
# variable_quick_start_invalidate_time: 1 0  # send a print job in X minutes after one ends will start the print immediately without re-calibrating. Note that during a print, the bed may still move, so this might not result in a perfect first layer.
variable_nozzle_probe_cal_timeout: 5      # nozzle probe calibration is invalidated after X minutes after the last calibration.
variable_keep_babystep_adjustments: 0     # 0: discard z offset after print ends; 1: automatically save nozzle offset after the print ends. It is recommended to turn this option off (0) as the nozzle offset shouldn't change much across prints. If babystep is needed in a specific print, it is probably an isolated case. Anyway, if you don't want to open up the web interface and issue the Z_OFFSET_APPLY_PROBE command every time you want to update the nozzle offset, you can turn this option on.
gcode:


##################################
###  PRINT JOB CONTROL MACROS  ###
##################################

[gcode_macro PRINT_START]
# variable_quick_start: 0
# variable_quick_start_calibrated_at_chamber: 0
# variable_quick_start_calibrated_at_bed: 0
gcode:
    SET_PIN PIN=caselight VALUE=1
    
    AUTOTUNE_SHAPERS  # I don't think this does anything

    # {% set quickstart = printer["gcode_macro PRINT_START"].quick_start %}

    {% set bedtemp = params.BED|int %}
    {% set hotendtemp = params.HOTEND|int %}
    {% set chambertemp = params.CHAMBER|default(0)|int %}

    {% if chambertemp == 0 %}
        M106 P3 S255  # turn on exhaust fan
    {% endif %}


    # {% if (printer['heater_bed'].temperature - bedtemp)|abs > 7.0 %}
    #     {% set quickstart = 0 %}
    #     RESPOND PREFIX="Quick start: " MSG="Bed temperature deviated too much since last 
    # {% endif %}
    # {% if (printer['heater_generic chamber'].temperature - chambertemp)|abs > 2.0 %}
    #     {% set quickstart = 0 %}
    # {% endif %}

    M140 S{bedtemp} 
    M141 S{chambertemp}
    SET_GCODE_OFFSET Z=0 MOVE=0

    M104 S{printer["gcode_macro JRYMK_MOD_VARIABLES"].nozzle_probing_temperature}
    G28
    CLEAR_NOZZLE HOTEND={hotendtemp} COOLDOWN=1
    G1 X100 Y10 F12000 # move away from the far right end
    M190 S{bedtemp}  # wait for bed temp
    G29 HOTEND={hotendtemp} ; bed mesh
    G0 Z50 F600
    G0 X0 Y0 F6000

    # {% if quickstart == 1 %}
    #     M190 S{bedtemp}
    # {% else %}
    #     M104 S{printer["gcode_macro JRYMK_MOD_VARIABLES"].nozzle_probing_temperature}
    #     G28
    #     CLEAR_NOZZLE HOTEND={hotendtemp} COOLDOWN=1
    #     G1 X100 Y10 F12000 # move away from the far right end
    #     M190 S{bedtemp}  # wait for bed temp
    #     G29 HOTEND={hotendtemp} ; bed mesh
    #     G0 Z50 F600
    #     G0 X0 Y0 F6000
    # {% endif %}

    M204 S10000

    M191 S{chambertemp}
    M109 S{hotendtemp}

    ENABLE_ALL_SENSOR
    save_last_file

# [delayed_gcode INVALIDATE_QUICK_START]
# gcode:
#     SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=quick_start VALUE=0

[gcode_macro PRINT_END]
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE

    {% if printer['gcode_move'].homing_origin.z != 0 %}
        {% if printer["gcode_macro JRYMK_MOD_VARIABLES"].keep_babystep_adjustments == 1 %}
            Z_OFFSET_APPLY_PROBE
        {% else %}
            _Z_OFFSET_APPLY_PROBE_ASK
        {% endif %}
    {% endif %}

    save_zoffset
    M106 P2 S0
    M106 P0 S0
    M106 P3 S0
    
    M104 S0
    M140 S0
    M141 S0

    M220 S100
    M221 S100
    SET_STEPPER_ENABLE STEPPER=stepper_x enable=0
	SET_STEPPER_ENABLE STEPPER=stepper_y enable=0
	SET_STEPPER_ENABLE STEPPER=stepper_z enable=1
    SET_STEPPER_ENABLE STEPPER=stepper_z1 enable=1
	SET_STEPPER_ENABLE STEPPER=extruder enable=0
	
    DISABLE_ALL_SENSOR
    BED_MESH_CLEAR
    G31
    CLEAR_LAST_FILE
    BEEP I=2 DUR=500

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    RAISE_Z AMOUNT=10  ; drop z by  10 to keep part away from nozzle
    CLEAR_Z AMOUNT=150 ; drop z to 150 for easy build plate removal

    G1 X0 Y0 F7800

    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    save_zoffset
    M106 P2 S0
    M106 P0 S0
    M106 P3 S0
    
    M104 S0
    M140 S0
    M141 S0

    M220 S100
    M221 S100
    SET_STEPPER_ENABLE STEPPER=stepper_x enable=0
	SET_STEPPER_ENABLE STEPPER=stepper_y enable=0
	SET_STEPPER_ENABLE STEPPER=stepper_z enable=1
    SET_STEPPER_ENABLE STEPPER=stepper_z1 enable=1
	SET_STEPPER_ENABLE STEPPER=extruder enable=0
	
    DISABLE_ALL_SENSOR
    SET_GCODE_OFFSET Z=0 MOVE=0
    BED_MESH_CLEAR
    G31
    BEEP I=2 DUR=500

    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT
    CLEAR_LAST_FILE

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    {% set z = params.Z|default(35)|int %}                                                   ; z hop amount
    
    {% if printer['pause_resume'].is_paused|int == 0 %}     
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        DISABLE_FILAMENT_WIDTH_SENSOR
        SET_FILAMENT_SENSOR SENSOR=fila ENABLE=0                                             ; disable filament sensor       
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume                
        BASE_PAUSE                                                                           ; pause print
        G92 E0
        G1 E-5 F1800
        {% if (printer.gcode_move.position.z ) < z %}
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            G91                                                                              ; relative positioning
            G1 Z{5} F900 
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        SAVE_GCODE_STATE NAME=PAUSEPARK2
        G90                                                                                  ; absolute positioning
        G1 X97 F9000
        G1 Y253 F9000                                     ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
        # M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=86400                                                       # set timeout to 24 hours. If you don't come back and refill filament, your print deserves to fail
        SET_STEPPER_ENABLE STEPPER=extruder enable=0
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    {% set e = params.E|default(5)|int %}                                          ; hotend prime amount (in mm)
    
    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        M83                                                                          ; relative extruder positioning
            G1 X97  F9000
            G1 Y253 F9000                            
            G91
            G1  E{e} F300                                          ; prime nozzle by E, lower Z back down
            G90
            G1 X85 F3000
            G1 X98 F3000
            G1 X85 F3000
            G1 X98 F3000
            G1 X85 F3000
            G1 X98 F3000
            G1 X85 F3000
            G1 X98 F3000
            G1 X85 F3000
            G1 X98 F3000
            G1 X85 F3000
            G1 X98 F3000
            G1 X65 F500
            G1 Y200 F3000
        RESTORE_GCODE_STATE NAME=PAUSEPARK2 MOVE=1 MOVE_SPEED=200                            
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=10        ; restore position
        BASE_RESUME       
        ENABLE_FILAMENT_WIDTH_SENSOR
        RESET_FILAMENT_WIDTH_SENSOR
        query_filament_width                                       ; resume print
        SET_FILAMENT_SENSOR SENSOR=fila ENABLE=1                   ; enable filament sensor
    {% endif %}


######################################
###  NOZZLE CLEANING AND FILAMENT  ###
######################################

[gcode_macro TIP_FORMING]  # from RatRig RatOS
gcode:
    # cooling parameter
	{% set cooling_moves = params.COOLING_MOVES|default(4)|int %}
	{% set cooling_move_length = params.COOLING_MOVE_LENGTH|default(10)|float %}
	{% set start_cooling_speed = params.START_COOLING_SPEED|default(10)|float * 60 %}
	{% set end_cooling_speed = params.END_COOLING_SPEED|default(50)|float * 60 %}
	{% if cooling_moves == 0 %}
		{% set cooling_move_length = 0 %}
	{% endif %}

	# dipping parameter
	{% set dip = true if params.DIP|default(false)|lower == "true" else false %}
	{% set dip_length = params.DIP_LENGTH|default(22)|float %}
	{% set dip_speed = params.DIP_SPEED|default(30)|float * 60 %}
	{% set dip_retract_speed = params.DIP_RETRACT_SPEED|default(70)|float * 60 %}

	# retraction parameter
	{% set retract_length = params.RETRACT_LENGTH|default(18)|float %}
	{% set start_retract_speed = params.START_RETRACT_SPEED|default(120)|float * 60 %}
	{% set end_retract_speed = params.END_RETRACT_SPEED|default(20)|float * 60 %}

	M220 S100    # reset any speed override

	# retraction
	G92 E0       # Reset extrusion distance
	{% set retract = retract_length + cooling_move_length / 2 - 15 %}
	G1 E-15 F{start_retract_speed}
	G1 E-{0.7 * retract} F{1.0 * end_retract_speed}
	G1 E-{0.2 * retract} F{0.5 * end_retract_speed}
	G1 E-{0.1 * retract} F{0.3 * end_retract_speed}

	# cooling
	G92 E0       # Reset extrusion distance
	{% if cooling_moves > 0 %}
		{% set i = (end_cooling_speed - start_cooling_speed) / (2 * cooling_moves - 1) %}
		{% for m in range(cooling_moves) %}
			G1 E{cooling_move_length} F{(start_cooling_speed + i * m * 2)}
			G1 E-{cooling_move_length} F{(start_cooling_speed + i * (m * 2 + 1))}
		{% endfor %}
	{% endif %}

	# dipping 
	G92 E0       # Reset extrusion distance
	{% if dip %}
		G1 E{dip_length} F{dip_speed}
		G4 P100
		G1 E-{dip_length} F{dip_retract_speed}
	{% endif %}

	G92 E0      # Reset extrusion distance
	M400        # Wait for moves to finish

[gcode_macro M603]
description: Filament unload
gcode:
    GO_TO_BUCKET
    M118 Heat up complete
    TIP_FORMING
    G1  E-90 F3000
    BUCKET_CUT
    M400
    M118 Unload finish
    LEAVE_BUCKET

[gcode_macro M604]
description: Filament load
gcode:
    GO_TO_BUCKET
    M118 Heat up complete
    M83 # relative extruder positioning
    BUCKET_PURGE AMOUNT=80
    M400
    M118 Load finish
    LEAVE_BUCKET

[gcode_macro GO_TO_BUCKET]
description: Go to purge bucket position for filament unload or purging
gcode:
    CONDITIONAL_HOME
    SAVE_GCODE_STATE NAME=GO_TO_BUCKET_STATE
    CLEAR_Z AMOUNT=30

    G90 ; absolute
    {% set curr_y = printer.toolhead.position.y %}
    {% if curr_y < 254 %} ; bucket operations will call GO_TO_BUCKET unconditionally
        {% if curr_y > 240 %} ; prevent crash from rear
            G1 Y240 F9000
        {% endif %}

        G1 X97 Y240 F9000
        SET_ACCEL ACCEL=100
        G1 Y254 F1500 ; gently press against wiper arm
        SET_ACCEL ; reset accel
    {% endif %}
    RESTORE_GCODE_STATE NAME=GO_TO_BUCKET_STATE


[gcode_macro LEAVE_BUCKET]
description: Leave the bucket gracefully
gcode:
    SAVE_GCODE_STATE NAME=LEAVE_BUCKET_STATE
    {% set curr_x = printer.toolhead.position.x %}
    {% set curr_y = printer.toolhead.position.y %}
    {% if (curr_y >= 240) and (curr_x >= 59) and (curr_x <= 98) %} ; if in the bucket area
        G90 ; absolute
        SET_ACCEL ACCEL=500
        G1 Y254 F2000
        G1 X97 F5000
        SET_ACCEL ACCEL=100
        G1 Y240 F1500 ; gently leave the wiper arm
        SET_ACCEL ; reset accel
    {% endif %}
    RESTORE_GCODE_STATE NAME=LEAVE_BUCKET_STATE

[gcode_macro BUCKET_CUT]
description: Cut off the extruded filament on the nozzle
gcode:
    SAVE_GCODE_STATE NAME=BUCKET_CUT_STATE
    GO_TO_BUCKET
    
    G90 ; absolute
    G1 X85 F6000
    G1 X98 F6000
    G1 X85 F6000
    G1 X98 F6000
    G1 X85 F6000
    G1 X98 F6000
    G1 X85 F18000
    G1 X98 F18000
    G1 X85 F18000
    G1 X98 F18000
    G1 X85 F18000
    G1 X98 F18000
    G1 X95 F18000

    G1 Y252 F8000 ; wiggle off the blob
    G1 Y253 F8000
    G1 Y252 F8000
    G1 Y253 F8000
    G1 Y252 F8000
    G1 Y253 F8000
    G1 Y250 F12000
    G1 Y253 F12000
    G1 Y250 F12000
    G1 Y253 F12000
    G1 Y246 F4000
    G1 Y253 F4000
    G1 Y246 F4000
    G1 Y253 F4000

    RESTORE_GCODE_STATE NAME=BUCKET_CUT_STATE

[gcode_macro FELT_WIPE]
description: Wipe on the felt pad
gcode:
    SAVE_GCODE_STATE NAME=FELT_WIPE_STATE
    GO_TO_BUCKET
    G90 ; absolute

    {% set y_min = 251 %}
    {% set y_max = 254 %}
    {% set x_max = 88 %}
    {% set x_min = 59 %}

    {% for i in range(y_max - y_min + 1) %}
        G1 X{x_min + 6} Y{y_max - i} F800
        G1 X{x_max} Y{y_max - i} F800
        G1 X98 F2000
        G1 X{x_max} F2000
    {% endfor %}

    {% for i in range(4) %}
        G1 X{x_min + i} Y247 F800
        G1 X{x_min + i} Y{y_max} F800
    {% endfor %}

    {% for i in range(y_max - y_min + 1) %}
        G1 X{x_min + 6} Y{y_min + i} F800
        G1 X{x_max} Y{y_min + i} F800
        G1 X98 F2000
        G1 X{x_max} F2000
    {% endfor %}


    RESTORE_GCODE_STATE NAME=FELT_WIPE_STATE

    # {% set speed = params.SPEED|default(500)|float %}
    # {% set y_min = 248 %}
    # {% set y_max = 254 %}
    # {% set y_offset = range(0, ( y_max - y_min) )|random %}
    # {% set x_max = 87 %}
    # {% set x_min = 59 %}

    # {% set repeat = params.REPEAT|default(8)|int %}
    # {% set total_x_travel = repeat * (x_max - x_min) * 2 %}
    # {% set cooldown_at = params.COOLDOWN_AT|default(repeat)|float %}
    
    # {% for i in range(total_x_travel) %}
    #     {% if i >= cooldown_at * ((x_max - x_min) * 2) %}
    #         M104 S0 ; shut down extruder
    #         {% set cooldown_at = total_x_travel + 1 %} ; prevent excessive extruder off calls
    #     {% endif %}

    #     {% set x_inc = i % ( 2 * (x_max - x_min) ) %}
    #     {% if x_inc > (x_max - x_min) %}
    #         {% set x_inc = ( 2 * (x_max - x_min) ) - x_inc %}
    #     {% endif %}
    #     {% set y_inc = (i + y_offset) % ( 4 * (y_max - y_min) ) %}
    #     {% if y_inc > (y_max - y_min) * 2 %}
    #         {% set y_inc = ( 4 * (y_max - y_min) ) - y_inc %}
    #     {% endif %}
    #     {% set y_inc = y_inc / 2 %}

    #     G1 X{ x_max - x_inc } Y{ y_max - y_inc } F{speed}
    # {% endfor %}

[gcode_macro NOZZLE_ROD_WIPE]
description: Wipe against the stainless rod to cut off purged filament
gcode:
    SAVE_GCODE_STATE NAME=ROD_WIPE_STATE

    {% set purge_pos = printer["gcode_macro NOZZLE_WIPE"].purge_pos %}
    {% set rod_pos = printer["gcode_macro NOZZLE_WIPE"].rod_pos %}
    GO_TO_BUCKET
    G90 ; absolute

    {% for i in range(2) %}
        G1 X{purge_pos} F2000
        G1 X{rod_pos - 5} F6000
    {% endfor %}
    {% for i in range(2) %}
        G1 X{purge_pos} F2000
        G1 X{rod_pos - 5} F2000
    {% endfor %}
    {% for i in range(2) %}
        G1 X{purge_pos} F2000
        G1 X{rod_pos - 5} F6000
    {% endfor %}
    
    RESTORE_GCODE_STATE NAME=ROD_WIPE_STATE


[gcode_macro NOZZLE_WIPER_WIPE]
description: Wipe against the Bambu A1 series silicone nozzle wiper
gcode:
    SAVE_GCODE_STATE NAME=ROD_WIPE_STATE

    {% set rod_pos = printer["gcode_macro NOZZLE_WIPE"].rod_pos %}
    {% set wiper_lpos = printer["gcode_macro NOZZLE_WIPE"].wiper_lpos %}
    {% set wiper_rpos = printer["gcode_macro NOZZLE_WIPE"].wiper_rpos %}
    {% set ymin = printer["gcode_macro NOZZLE_WIPE"].ymin %}
    {% set ymax = printer["gcode_macro NOZZLE_WIPE"].ymax %}
    GO_TO_BUCKET
    G90 ; absolute

    {% for i in range(5) %}
        {% set entry = range(wiper_lpos, wiper_rpos + 1)|random %}
        G1 Y{ymin-3} F1000
        G1 X{entry} F1000
        G1 Y{ymax} F3000
        # G1 Y{ymin-3} F1000
        # G1 Y{ymax} F1000
        G1 X{rod_pos - 2} F1000
    {% endfor %}
    
    # {% for i in range(3) %}
    #     G1 Y{ymin} F3000
    #     {% set entry = range(wiper_lpos, wiper_rpos + 1)|random %}
    #     G1 X{entry} F1000
    #     G1 Y{ymax} F8000
    #     {% set return = range(wiper_lpos, wiper_rpos + 1)|random %}
    #     G1 X{return} F1000
    # {% endfor %}

    # G1 X{rod_pos - 1} F1000
    # G1 Y{ymax} F8000

    RESTORE_GCODE_STATE NAME=ROD_WIPE_STATE

[gcode_macro NOZZLE_FELT_WIPE]
description: Wipe against the Qidi Q1 Pro felt nozzle cleaner
gcode:
    SAVE_GCODE_STATE NAME=ROD_WIPE_STATE

    {% set rod_pos = printer["gcode_macro NOZZLE_WIPE"].rod_pos %}
    {% set felt_lpos = printer["gcode_macro NOZZLE_WIPE"].felt_lpos %}
    {% set felt_rpos = printer["gcode_macro NOZZLE_WIPE"].felt_rpos %}
    {% set ymin = printer["gcode_macro NOZZLE_WIPE"].ymin %}
    {% set ymax = printer["gcode_macro NOZZLE_WIPE"].ymax %}
    GO_TO_BUCKET
    G90 ; absolute

    {% for i in range(8) %}
        {% for i in range(ymax - ymin) %}
            G1 Y{ymax - i} F3000
            G1 X{felt_rpos + 2} F3000
            G1 X{felt_lpos} F1200
            G1 X{felt_rpos + 2} F1200
        {% endfor %}
    {% endfor %}

    RESTORE_GCODE_STATE NAME=ROD_WIPE_STATE

[gcode_macro NOZZLE_WIPE]
description: For the 3-in-one nozzle wiper mod
variable_felt_lpos: 59 ; you shouldn't be changing this one
variable_felt_rpos: 73
variable_wiper_lpos: 78
variable_wiper_rpos: 83
variable_rod_pos: 90
variable_purge_pos: 97 ; the default position
variable_ymin: 251
variable_ymax: 254
gcode:
    GO_TO_BUCKET
    NOZZLE_ROD_WIPE
    # NOZZLE_WIPER_WIPE
    NOZZLE_FELT_WIPE
    LEAVE_BUCKET


[gcode_macro BUCKET_PURGE]
description: Purge filament to the purge bucket
gcode:
    SAVE_GCODE_STATE NAME=BUCKET_PURGE_STATE
    M118 Purging
    GO_TO_BUCKET

    {% set hotendtemp = params.HOTEND|default(250)|int %}
    M109 S{hotendtemp}

    {% set purgeamount = params.AMOUNT|default(80)|int %}
    M83 ; relative E
    G92 E0 ; reset E
    G1 E{purgeamount} F350 ; extrude
    
    M106 S255 ; cooling fan max
    
    G1 E-1 F2400
    G1 E1 F2400
    G1 E-1 F2400
    G1 E1 F3000
    G1 E-1 F3000
    G1 E1 F3000
    G1 E-1 F3000

    G4 P8000 ; wait for 8 seconds
    
    G1 E-2 F3000
    
    BUCKET_CUT
    M106 S0 ; cooling fan off

    # {% set leave = params.LEAVE|default(1)|int %}
    # {% if leave > 0 %}
    #     LEAVE_BUCKET
    # {% endif %}
    RESTORE_GCODE_STATE NAME=BUCKET_PURGE_STATE

[gcode_macro CLEAR_NOZZLE]
gcode:
    SAVE_GCODE_STATE NAME=CLEAR_NOZZLE_STATE
    GO_TO_BUCKET
    {% set hotendtemp = params.HOTEND|default(250)|int %}
    {% set purgeamount = params.AMOUNT|default(10)|float %}
    {% set default_cooldown = not printer.idle_timeout.state == "Printing" %}
    {% set cool_nozzle = params.COOLDOWN|default(default_cooldown)|int %}
    ; by default it will not cool nozzle, so you can invoke this midprint without nozzle dropping below extrusion temp and fail the print
    
    {% if purgeamount > 0 %}
        BUCKET_PURGE HOTEND={hotendtemp} AMOUNT={purgeamount} ; purge without leaving
    {% endif %}
    
    {% if cool_nozzle > 0 %}
        M104 S{printer["gcode_macro JRYMK_MOD_VARIABLES"].nozzle_probing_temperature}
        RESPOND MSG="Cooling down nozzle"
    {% else %}
        RESPOND MSG="Will not cooldown nozzle"
    {% endif %}
    
    # FELT_WIPE
    NOZZLE_WIPE
    M400
    M118 Nozzle cleared

    LEAVE_BUCKET ; gracefully leave the bucket

    {% if cool_nozzle > 0 %}
        G1 Y120 F9000
        G1 X245 F9000
        SET_FAN_SPEED FAN=auxiliary_cooling_fan SPEED=1
        SET_FAN_SPEED FAN=cooling_fan SPEED=1
        TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={printer["gcode_macro JRYMK_MOD_VARIABLES"].nozzle_probing_temperature} ; probing temp
        M118 Nozzle cooled
        SET_FAN_SPEED FAN=auxiliary_cooling_fan SPEED=0
        SET_FAN_SPEED FAN=cooling_fan SPEED=0
    {% endif %}

    M107
    M106 P2 S0
    M400
    RESTORE_GCODE_STATE NAME=CLEAR_NOZZLE_STATE
    M118 Nozzle cooled

[gcode_macro CLEAR_NOZZLE_PLR]
gcode:
    {% set hotendtemp = params.HOTEND|default(250)|int %}
    {% if (printer.gcode_move.position.z ) < 35 %}
        G90
        G1 Z35 F900
    {% else %}
        G91
        G1 Z5 F900 
        G90
    {% endif %}
    G1 X97 F15000
    G1 Y243 F15000
    G1 Y254 F800

    M109 S{hotendtemp}

    G92 E0
    G1 E80 F400
    M106 S255

    G1 X97 F500
    G1 X85 F2000
    G1 X97 F2000
    G1 X85 F2000
    G1 X97 F2000
    G1 X85 F2000
    G1 X97 F2000
    G1 X85 F2000
    G1 X97 F2000
    G1 X85 F2000
    G1 X97 F2000
    G1 X85 F2000
    G1 X97 F2000
    G1 Y240 F800


##################
###  MOVEMENT  ###
##################

[homing_override]
axes:xyz
gcode: 
    {% set HOME_CUR = 1 %}
    {% set driver_config = printer.configfile.settings['tmc2240 stepper_x'] %}
    {% set RUN_CUR = driver_config.run_current %}
    {% set HOLD_CUR = driver_config.hold_current %}
    M204 S10000
    M220 S100
	{% if params.X is defined %} ; explicit home X
	    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CUR * 0.7} 
        G28 X ; home X
		SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CUR}     
        BEEP I=1 DUR=100
        G1 X10 F1200 ; retract 10mm
    {% endif %}

    {% if params.Y is defined %} ; explicit home Y
		SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CUR * 0.9} 
		G28 Y ; home Y
		SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CUR}  
        BEEP I=1 DUR=100          
       G1 Y10 F1200 ; retract 10mm
    {% endif %}

    {% if params.Z is defined %} ; explicit home Z (perform auto offset)
        SET_KINEMATIC_POSITION Z={printer.toolhead.axis_maximum.z-5}
        QIDI_PROBE_PIN_2
        probe samples=2
        SET_KINEMATIC_POSITION Z=1.9
        G1 Z10 F600
        Z_DOUDONG ; vibrate z
        QIDI_PROBE_PIN_1
        probe probe_speed=5 lift_speed=5 samples=5 sample_retract_dist=5 # TODO
        SET_KINEMATIC_POSITION Z=-0.1
        G1 Z30 F480
    {% endif %}

    {% if params.X is undefined %} ; basic home all
    {% if params.Y is undefined %}
    {% if params.Z is undefined %}
        SET_KINEMATIC_POSITION X=0
        SET_KINEMATIC_POSITION Y=0
        SET_KINEMATIC_POSITION Z={printer.toolhead.axis_maximum.z-10}
        G91
        G1 Z7 F600	
        G1 X10 F2400
        G1 Y10 F2400
        G4 P100
    
        SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CUR * 0.8} 
        G28 X
    	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CUR} 
        BEEP I=1 DUR=100
        G1 X10 F1200
    
    	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CUR * 0.9} 
    	G28 Y
    	SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CUR} 
        BEEP I=1 DUR=100        
        G1 Y10 F1200

        SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CUR * 0.8} 
        G28 X
    	SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CUR} 
        BEEP I=1 DUR=100  
        G1 X10 F1200

        SET_KINEMATIC_POSITION Z={printer.toolhead.axis_maximum.z-10}

        MOVE_PROBE_TO_CENTER

        G91
        QIDI_PROBE_PIN_2
        G28 Z

        {% if not printer.z_tilt.applied %}
            Z_TILT_ADJUST ; if we can home all, we can probably safely z_tilt as well
        {% endif %}

        MOVE_PROBE_TO_CENTER
        G91
        QIDI_PROBE_PIN_2
        G28 Z
        G1 Z20 F600

        SAVE_GCODE_STATE NAME=HOMED_STATE
    {% endif %}
    {% endif %}
    {% endif %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CUR} 
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CUR} 
    M204 S10000
    G90
    QIDI_PROBE_PIN_2

[gcode_macro CONDITIONAL_HOME]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

[gcode_macro WAIT_FOR_MOVES]
gcode:
    M400

[gcode_macro SET_ACCEL]
gcode:
    {% set s = params.ACCEL|default(10000)|float %}
    SET_VELOCITY_LIMIT ACCEL={s}
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL={s/2}

[gcode_macro M204]
rename_existing: M99204
gcode:
    {% if params.S is defined %}
        {% set s = params.S|float %}
    {% endif %}
    {% if params.P is defined %}
    {% if params.T is defined %}
        {% set s = [params.P|float ,params.T|float] | min %}
    {% endif %}
    {% endif %}

    SET_VELOCITY_LIMIT ACCEL={s}
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL={s/2}

[gcode_macro RAISE_Z]
description: Drop the bed by AMOUNT to prevent dragging
gcode:
    SAVE_GCODE_STATE NAME=RAISE_Z_STATE
    {% set curr_z = printer.toolhead.position.z %}
    {% set max_z = printer.toolhead.axis_maximum.z %}
    {% set target_z = curr_z + params.AMOUNT|default(10)|float %}

    G90 ; absolute
    G1 Z { [target_z, max_z]|min }
    RESTORE_GCODE_STATE NAME=RAISE_Z_STATE

[gcode_macro CLEAR_Z]
description: Drop Z by at least up to AMOUNT to leave room for stuff
gcode:
    SAVE_GCODE_STATE NAME=CLEAR_Z_STATE
    {% set curr_z = printer.toolhead.position.z %}
    {% set max_z = printer.toolhead.axis_maximum.z %}
    {% set target_z = [curr_z, params.AMOUNT|default(10)|float]|max %}

    G90 ; absolute
    G1 Z { [target_z, max_z]|min }
    RESTORE_GCODE_STATE NAME=CLEAR_Z_STATE


#########################
###  BED CALIBRATION  ###
#########################

[gcode_macro G31]
gcode:
    SET_GCODE_VARIABLE MACRO=G29 VARIABLE=k VALUE=1

[gcode_macro G32]
gcode:
    SET_GCODE_VARIABLE MACRO=G29 VARIABLE=k VALUE=0

[gcode_macro set_meshoffset]
variable_zoffset:0
gcode:
    ADD_Z_OFFSET_TO_BED_MESH ZOFFSET={0 - zoffset} ; why don't you just use "zero_reference_position" from klipper?
    SET_GCODE_VARIABLE MACRO=set_meshoffset VARIABLE=zoffset VALUE=0
[gcode_macro save_meshoffset]
gcode:
    SET_GCODE_VARIABLE MACRO=set_meshoffset VARIABLE=zoffset VALUE={printer.probe.last_z_result}

[gcode_macro G29]
variable_k:1
gcode:
    {% set hotendtemp = params.HOTEND|default(200)|int %}
    BED_MESH_CLEAR
    {% if k|int==1 %} ; "G31" = kamp mode of the G29 bed mesh calibrate.
        ; Apparently G31 is never called, and k=1 by default. A full mesh calibrate from the display will restart klipper, resetting k anyways
        G28   
        get_zoffset # now z0 is true zero
        # M104 S{printer["gcode_macro JRYMK_MOD_VARIABLES"].nozzle_probing_temperature}
        M104 S{hotendtemp}
        G91
        G1 X{0 - printer.probe["x_offset"]} Y{0 - printer.probe["y_offset"]} F9000
        G90
        G1 Z10 F600
        probe probe_speed=5 lift_speed=5 samples=4 sample_retract_dist=4 # get qdprobe offset, where z0 is true zero by get_zoffset
        save_meshoffset
        G1 z10 F600
        BED_MESH_CALIBRATE PROFILE=kamp
        SAVE_VARIABLE VARIABLE=profile_name VALUE='"kamp"'
        set_meshoffset
        SAVE_CONFIG_QD # just save_config without a restart request

    {% else %} ; G32 "full home" = home and apply default bed mesh. Hmm... sure.
        g28
        get_zoffset
        M104 S{hotendtemp}
        
        BED_MESH_PROFILE LOAD=default
        SAVE_VARIABLE VARIABLE=profile_name VALUE='"default"'
    {% endif %}


[gcode_macro ENABLE_ALL_SENSOR]
gcode:
    ENABLE_FILAMENT_WIDTH_SENSOR
    RESET_FILAMENT_WIDTH_SENSOR
    query_filament_width
    SET_FILAMENT_SENSOR SENSOR=fila ENABLE=1

[gcode_macro DISABLE_ALL_SENSOR]
gcode:
    SET_FILAMENT_SENSOR SENSOR=fila ENABLE=0
    DISABLE_FILAMENT_WIDTH_SENSOR


[gcode_macro M84]
rename_existing:M84.1
gcode:
    M84.1
	SET_STEPPER_ENABLE STEPPER=stepper_x enable=0
	SET_STEPPER_ENABLE STEPPER=stepper_y enable=0
	SET_STEPPER_ENABLE STEPPER=stepper_z enable=1
    SET_STEPPER_ENABLE STEPPER=stepper_z1 enable=1
	SET_STEPPER_ENABLE STEPPER=extruder enable=0

[gcode_macro DETECT_INTERRUPTION]
gcode:
    {% set was_interrupted = printer.save_variables.variables.was_interrupted %}
    {% if was_interrupted %}
    M118 Detected unexpected interruption during the last print. Do you want to resume printing? (Do not move the extruder before resuming.)
    M118 Yes: RESUME_INTERRUPTED
    M118 No: CLEAR_LAST_FILE
    {% endif %}
    
[delayed_gcode PRINTER_INIT]
initial_duration:0.2
gcode:
	SET_STEPPER_ENABLE STEPPER=stepper_z enable=1
    SET_STEPPER_ENABLE STEPPER=stepper_z1 enable=1
    BED_MESH_CLEAR      
    SET_FILAMENT_SENSOR SENSOR=fila ENABLE=0



[gcode_macro SHAPER_CALIBRATE]
rename_existing: RESHAPER_CALIBRATE
gcode:
    RESHAPER_CALIBRATE FREQ_START=20 FREQ_END=150



[gcode_macro BEEP]
gcode:
    {% set i = params.I|default(1)|int %}        ; Iterations (number of times to beep).
    {% set dur = params.DUR|default(100)|int %}  ; Duration/wait of each beep in ms. Default 100ms.

    {% if printer["output_pin sound"].value|int == 1 %}
        {% for iteration in range(i|int) %}
            SET_PIN PIN=beeper VALUE=1
            G4 P{dur}
            SET_PIN PIN=beeper VALUE=0
    		G4 P{dur}
        {% endfor %}
    {% endif %}

[gcode_macro M141]
gcode:
    {% if printer["heater_generic chamber"] is defined %}
        {% set s = params.S|float %}
        SET_HEATER_TEMPERATURE HEATER=chamber TARGET={([s, 70]|min)}
    {% endif %}

[gcode_macro M191]
gcode:
    #Parameters
    {% if printer["heater_generic chamber"] is defined %}
        {% set s = params.S|float %}
    
        M141 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  
        {% if s != 0 %}
            TEMPERATURE_WAIT SENSOR="heater_generic chamber" MINIMUM={([s, 70]|min)-2} #MAXIMUM={s+1}   
        {% endif %}
    {% endif %}

[gcode_macro M106]
gcode:
    {% set p = params.P|default(0)|int %}

    {% if p == 2 %}
    {% if params.S is defined %}
        SET_FAN_SPEED FAN=auxiliary_cooling_fan SPEED={(params.S|float / 255.0)}
    {% else %}
        SET_FAN_SPEED FAN=auxiliary_cooling_fan SPEED=1
    {% endif %}
    {% endif %} 

    {% if p == 0 %}
    {% if params.S is defined %}
        SET_FAN_SPEED FAN=cooling_fan SPEED={(params.S|float / 255.0)}
    {% else %}
        SET_FAN_SPEED FAN=cooling_fan SPEED=1
    {% endif %}
    {% endif %} 

    {% if p == 3 %}
    {% if params.S is defined %}
        SET_FAN_SPEED FAN=chamber_circulation_fan SPEED={(params.S|float / 255.0)}
    {% else %}
        SET_FAN_SPEED FAN=chamber_circulation_fan SPEED=1
    {% endif %}
    {% endif %} 

[gcode_macro M107]
gcode:  
    SET_FAN_SPEED FAN=cooling_fan SPEED=0

[gcode_macro M303]
gcode:
    {% if params.E is defined %}
     {% if params.S is defined %}
        {% if (params.E|int)==-1 %} 
         PID_CALIBRATE HEATER=heater_bed TARGET={params.S|int}
        {% endif %}
        {% if (params.E|int)==0 %}
         PID_CALIBRATE HEATER=extruder TARGET={params.S|int}
        {% endif %}
     {% endif %}
  {% endif %}

[gcode_macro M8029]
gcode:
     {% if params.D is defined %}
       {% if (params.D|int)==1 %} 
        ENABLE_FILAMENT_WIDTH_SENSOR
       {% endif %}
       {% if (params.D|int)==0 %} 
        DISABLE_FILAMENT_WIDTH_SENSOR
       {% endif %}
     {% endif %}
     
[gcode_macro M900]
description: Pressure advance support from Qidi Slicer
gcode:
    {% if params.K is defined %} 
          SET_PRESSURE_ADVANCE ADVANCE={params.K}
    {% endif %}  
    {% if params.T is defined %}    
       SET_PRESSURE_ADVANCE SMOOTH_TIME={params.T}
    {% endif %} 

[gcode_macro M290]
gcode:
   SET_GCODE_OFFSET Z_ADJUST={params.Z}

[gcode_macro M901]
gcode:
    G28
    SHAPER_CALIBRATE
    M400
    M118 Input shaping complete
    SAVE_CONFIG
       
[gcode_macro M0]
gcode:
    PAUSE

[gcode_macro M25]
rename_existing: M9925
gcode:
    PAUSE

[gcode_macro RESPOND_INFO]
variable_S:0
gcode:
    {% if params.S is defined %}
        {% set s = params.S|int %}
        {% if s == 0 %}
            { action_respond_info("Nozzle cooled")  }
        {% endif %}
    {% endif %}


#################################
###  PROBING AND CALIBRATION  ###
#################################

[gcode_macro MOVE_PROBE_TO_CENTER]
gcode:
    G90
    G1 X{245.0 / 2 - printer.probe["x_offset"]} Y{245.0 / 2 - printer.probe["y_offset"]} F12000

[gcode_macro Z_DOUDONG]  # by the way DOUDONG is the pronunication of 抖動, which means to shake
gcode:
    RESPOND PREFIX="" MSG="Calibrating bed sensors for nozzle probing. Do not move the printer or touch the bed, otherwise the probe may not trigger properly."
    M104 S{printer["gcode_macro JRYMK_MOD_VARIABLES"].nozzle_probing_temperature}
    M204 S30
    G90
    G0 Z2
    G91
    G4 P1000  # wait for 1 second (for vibrations to stop)
    SET_PIN PIN=ctlyd VALUE=1
    {% for z in range(1,7) %}
        G1 Z5 F600
        G1 Z-5 F600
    {% endfor %}
    SET_PIN PIN=ctlyd VALUE=0
    G4 P500 # wait for 0.5 seconds
    G1 Z4
    SET_GCODE_VARIABLE MACRO=PROBE_NOZZLE VARIABLE=probe_cal VALUE=1
    UPDATE_DELAYED_GCODE ID=INVALIDATE_PROBE_CAL DURATION={printer["gcode_macro JRYMK_MOD_VARIABLES"].nozzle_probe_cal_timeout * 60}
    G90

[delayed_gcode INVALIDATE_PROBE_CAL]
gcode:
    SET_GCODE_VARIABLE MACRO=PROBE_NOZZLE VARIABLE=probe_cal VALUE=0

[gcode_macro PROBE_NOZZLE]
variable_probe_cal: 0
variable_result: 0
gcode:
    RESPOND PREFIX="" MSG="Nozzle probing..."
    QIDI_PROBE_PIN_1
    {% if printer["gcode_macro PROBE_NOZZLE"].probe_cal == 0 %}
        Z_DOUDONG
    {% endif %}
    CLEAR_Z AMOUNT=10
    M204 S30 # lower printer accelerations
    G4 P1500 # wait for machine to settle, to prevent premature triggers
    # SET_KINEMATIC_POSITION Z={printer['gcode_move'].position.z} # clear offset
    probe probe_speed=5 lift_speed=5 samples=5 sample_retract_dist=5  # the probe specifications in printer.cfg is shared between the two probes, so we set that for the inductive probe for bed meshing, and override values here for the nozzle probe
    # SET_KINEMATIC_POSITION Z=0
    # G1 Z{printer.probe.last_z_result}
    # G90
    _PROBE_NOZZLE_SAVE MACRO={params.MACRO|default("undefined")|string} VARIABLE={params.VARIABLE|default("undefined")|string}
    QIDI_PROBE_PIN_2

[gcode_macro _PROBE_NOZZLE_SAVE]
variable_result: 0
variable_save_macro: ''
variable_save_variable: ''
gcode:
    {% set macro = params.MACRO|default("undefined")|string %}
    {% set var = params.VARIABLE|default("undefined")|string %}
    SET_GCODE_VARIABLE MACRO=PROBE_NOZZLE VARIABLE=result VALUE={printer.probe.last_z_result}
    {% if var != "undefined" %}
        SET_GCODE_VARIABLE MACRO={macro} VARIABLE={var} VALUE={printer.probe.last_z_result}
    {% endif %}

[gcode_macro GET_ZOFFSET]
variable_endstop_offset: 0
gcode:
    G1 X{params.x|default(122.5 + (range(-10, 10)|random))|float} Y{params.y|default(122.5 + (range(-10, 10)|random))|float} Z10 F6000
    M109 S{printer["gcode_macro JRYMK_MOD_VARIABLES"].nozzle_probing_temperature}
    PROBE_NOZZLE
    # M114 # get current position

    {% set nozzle_offset = 0.1 %}  # default value for new cfg installation
    
    {% if 'nozzle_offset' not in printer.save_variables.variables %}
        SAVE_VARIABLE VARIABLE=nozzle_offset VALUE={nozzle_offset}
    {% else %}
        {% set nozzle_offset = printer.save_variables.variables.nozzle_offset %}
    {% endif %}

    SET_KINEMATIC_POSITION Z={0 - nozzle_offset}
    _GET_ZOFFSET_SAVE
    G1 Z10 F600
    M204 S10000

[gcode_macro _GET_ZOFFSET_SAVE]
gcode:
    {% set old = printer["gcode_macro GET_ZOFFSET"].endstop_offset %}
    {% set offset = printer["gcode_macro PROBE_NOZZLE"].result - printer['toolhead'].position.z %}
    SET_GCODE_VARIABLE MACRO=GET_ZOFFSET VARIABLE=endstop_offset VALUE={old + offset}
    RESPOND PREFIX="" MSG="Endstop offset is {'%0.3f' % (old + offset)|float} not taking the Z offset into account. Use command Z_OFFSET_APPLY_ENDSTOP if you want the nozzle position to be somewhat accurate prior to nozzle probing after next restart. You should still refrain from moving the Z axis to near 0 before calling GET_ZOFFSET, since the inductive sensor is subject to thermal drift, and the probing location is different from the homing location, so this is just an approximation."
    {% if printer['gcode_move'].homing_origin.z != 0 %}
        RESPOND PREFIX="" MSG="If you want to keep your current Z babystep offset value, issue the command Z_OFFSET_APPLY_PROBE."
    {% endif %}

[gcode_macro Z_OFFSET_APPLY_ENDSTOP]
rename_existing: _ACTUAL_Z_OFFSET_APPLY_ENDSTOP
variable_z_endstop_position: 0
gcode:
    {% set old_offset = printer['gcode_move'].homing_origin.z %}
    SET_GCODE_OFFSET Z={printer["gcode_macro GET_ZOFFSET"].endstop_offset} MOVE=0
    _ACTUAL_Z_OFFSET_APPLY_ENDSTOP
    RESPOND PREFIX="" MSG="Z endstop position change: {printer["gcode_macro GET_ZOFFSET"].endstop_offset}"
    SET_GCODE_OFFSET Z={old_offset}
    {% if old_offset != 0 %}
        RESPOND PREFIX="" MSG="If you want to keep your current Z babystep offset value, issue the command Z_OFFSET_APPLY_PROBE first. Then, issue Z_OFFSET_APPLY_ENDSTOP again."
    {% endif %}

[gcode_macro Z_OFFSET_APPLY_PROBE]
rename_existing: _ACTUAL_Z_OFFSET_APPLY_PROBE
gcode:
    {% set zoffset = printer['gcode_move'].homing_origin.z %}
    SAVE_VARIABLE VARIABLE=nozzle_offset VALUE={printer.save_variables.variables.nozzle_offset + zoffset}
    RESPOND PREFIX="" MSG="Nozzle offset is {'%0.3f' % (printer.save_variables.variables.nozzle_offset + zoffset)|float}, true zero relative to the nozzle probe trigger point. "
    {% if printer.save_variables.variables.nozzle_offset + zoffset < 0 %}
        RESPOND TYPE=error MSG="Oh no! The additional nozzle offset is now negative, which is a very bad idea. This means that your first layer will be set even lower than the nozzle probe trigger point, which on the Q1 Pro, is usually not the case. Make sure your nozzle is clean during probing. To measure again, issue the GET_ZOFFSET command. Then, adjust the Z offset value and issue Z_OFFSET_APPLY_PROBE again. The value is applied for now anyway, you may ignore this warning if this is what it takes to get a good first layer on your machine."
    {% endif %}
    SET_GCODE_VARIABLE MACRO=GET_ZOFFSET VARIABLE=endstop_offset VALUE={printer["gcode_macro GET_ZOFFSET"].endstop_offset + zoffset}
    SET_GCODE_OFFSET Z=0 MOVE=0

[gcode_macro _Z_OFFSET_APPLY_PROBE_ASK]
gcode:
    {% if printer['gcode_move'].homing_origin.z != 0 %}
        {% if params.THEN_ENDSTOP %}
            RESPOND PREFIX="" MSG="If you want to keep your current Z babystep offset value, issue the command Z_OFFSET_APPLY_PROBE first. Then, issue Z_OFFSET_APPLY_ENDSTOP again."
        {% else %}
            RESPOND PREFIX="" MSG="If you want to keep your current Z babystep offset value, issue the command Z_OFFSET_APPLY_PROBE."
        {% endif %}
    {% endif %}

# [gcode_macro NOZZLE_EXPANSION_CALIBRATE]
# variable_temperature_delta: 0
# variable_nozzle_delta: 0
# gcode:
#     M104 S{printer["gcode_macro JRYMK_MOD_VARIABLES"].nozzle_probing_temperature}
#     G28
#     CLEAR_NOZZLE HOTEND=250 COOLDOWN=1
#     G90
#     {% set ycoord = (range(2, 22)|random) %}
#     G1 X-1 Y{ycoord} Z10 F6000

#     RESPOND PREFIX="EXPANSION_CAL: " MSG="Make sure the build plate is aligned well! Nozzle will be placed at X=-1 to prevent damage to the print area."
#     RESPOND PREFIX="EXPANSION_CAL: " MSG="Waiting for probing temperature"
#     M109 S{printer["gcode_macro JRYMK_MOD_VARIABLES"].nozzle_probing_temperature}
#     RESPOND PREFIX="EXPANSION_CAL: " MSG="Waiting for 30 seconds for nozzle to settle"
#     G4 P20000

#     RESPOND PREFIX="EXPANSION_CAL: " MSG="Preparing for probing, calibrating sensors"
#     USE_NOZZLE_PROBE
#     Z_DOUDONG
#     M204 S30
#     VIBRATE_XY
#     G4 P3000
#     RESPOND PREFIX="EXPANSION_CAL: " MSG="Probing for reference temperature"
#     PROBE_NOZZLE
#     SET_KINEMATIC_POSITION Z=0
#     M114
#     G1 Z10 F600

#     {% set target = params.TARGET|default(250)|int %}
#     SET_GCODE_VARIABLE MACRO=NOZZLE_EXPANSION_CALIBRATE VARIABLE=temperature_delta VALUE={target - printer["gcode_macro JRYMK_MOD_VARIABLES"].nozzle_probing_temperature}

#     RESPOND PREFIX="EXPANSION_CAL: " MSG="Heating to {target} degrees."
#     M109 S{target}
#     RESPOND PREFIX="EXPANSION_CAL: " MSG="Waiting for about 60 seconds for nozzle to settle"
#     G4 P50000
#     NOZZLE_WIPE
#     G1 E-1 F2400
#     G1 X-1 Y{ycoord} Z10 F20000
    
#     RESPOND PREFIX="EXPANSION_CAL: " MSG="Probing"
#     PROBE_NOZZLE MACRO=NOZZLE_EXPANSION_CALIBRATE VARIABLE=nozzle_delta
#     G1 Z10 F600

#     M104 S{printer["gcode_macro JRYMK_MOD_VARIABLES"].nozzle_probing_temperature}
#     NOZZLE_EXPANSION_CALIBRATE_RESULT

# [gcode_macro NOZZLE_EXPANSION_CALIBRATE_RESULT]
# gcode:
#     RESPOND PREFIX="" MSG="Nozzle elongated by "{printer["gcode_macro NOZZLE_EXPANSION_CALIBRATE"].nozzle_delta}"mm when the hotend temperature is increased by "{printer["gcode_macro NOZZLE_EXPANSION_CALIBRATE"].temperature_delta}"deg C"
#     RESPOND PREFIX="" MSG="Update the values in [gcode_macro JRYMK_MOD_VARIABLES] by editing the gcode_macro.cfg file"
#     {% set coeff = printer["gcode_macro NOZZLE_EXPANSION_CALIBRATE"].nozzle_delta * 10 / printer["gcode_macro NOZZLE_EXPANSION_CALIBRATE"].temperature_delta %}
#     RESPOND PREFIX="" MSG="variable_nozzle_expansion_coeff: "{coeff}
#     SET_GCODE_VARIABLE MACRO=JRYMK_MOD_VARIABLES VARIABLE=nozzle_expansion_coeff VALUE={coeff}
#     RESPOND PREFIX="" MSG="Current value is temporarily applied and will take affect before restart."


########################
###  EXTRA FEATURES  ###
########################

[exclude_object]

[gcode_arcs]
resolution: 1.0

[gcode_macro DUMP_VARIABLES] ; https://ellis3dp.com/Print-Tuning-Guide/articles/useful_macros/dump_variables.html
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}

[gcode_macro VIBRATE_XY]
gcode:
    SAVE_GCODE_STATE NAME=VIBRATE_XY_STATE
    M204 S20000
    G91
    {% for i in range(50) %}
        G1 X-1 F30000
        G1 X2 F30000
        G1 X-1 F30000
        G1 Y-1 F30000
        G1 Y2 F30000
        G1 Y-1 F30000
    {% endfor %}
    G90
    RESTORE_GCODE_STATE NAME=VIBRATE_XY_STATE


###################################
###  RANDOM STUFF QIDI PUTS IN  ###
###################################

[gcode_macro M109]
rename_existing: M99109
gcode:
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}

[gcode_macro M4031]
gcode:
    SET_TMC_CURRENT STEPPER=stepper_z CURRENT={printer.configfile.settings['tmc2209 stepper_z'].run_current * 0.8 }
    SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={printer.configfile.settings['tmc2209 stepper_z1'].run_current * 0.8 }
    REVERSE_HOMING
    SET_TMC_CURRENT STEPPER=stepper_z CURRENT={printer.configfile.settings['tmc2209 stepper_z'].run_current}
    SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={printer.configfile.settings['tmc2209 stepper_z1'].run_current}
    G91
    G1 Z-30 F600
    G90

    SET_TMC_CURRENT STEPPER=stepper_z CURRENT={printer.configfile.settings['tmc2209 stepper_z'].run_current * 0.8 }
    SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={printer.configfile.settings['tmc2209 stepper_z1'].run_current * 0.8 }
    REVERSE_HOMING
    SET_TMC_CURRENT STEPPER=stepper_z CURRENT={printer.configfile.settings['tmc2209 stepper_z'].run_current}
    SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={printer.configfile.settings['tmc2209 stepper_z1'].run_current}
    G91
    G1 Z-30 F600
    G90

[gcode_macro test_zoffset]
gcode:
    G28
    GET_ZOFFSET
    G91
    G1 X{0 - printer.probe["x_offset"]} Y{0 - printer.probe["y_offset"]} F9000
    G90
    G1 Z10 F600
    probe
    M400
    G4 P5000
    G1 Z10 F600

[gcode_macro move_subzoffset]
gcode:
    G1 Z{printer.probe.last_z_result} F600

[gcode_macro save_zoffset]
gcode:
    {% if printer.gcode_move.homing_origin.z < 0.5 %}
       SAVE_VARIABLE VARIABLE=z_offset VALUE={printer.gcode_move.homing_origin.z}
    {% endif %}

[gcode_macro set_zoffset]
gcode:
    {% set z = printer.save_variables.variables.z_offset %}
    SET_GCODE_OFFSET Z={z} MOVE=0

[gcode_macro AUTOTUNE_SHAPERS]
variable_autotune_shapers: 'ei'
gcode:

[output_pin sound]
pin: gpio8
value:0

[gcode_macro beep_on]
gcode:
    SET_PIN PIN=sound VALUE=1
    
[gcode_macro beep_off]
gcode:
    SET_PIN PIN=sound VALUE=0

[gcode_macro M4027]
gcode:
    G1 X{120 - printer.probe["x_offset"]} Y{120 - printer.probe["y_offset"]} F9000
    probe
    save_meshoffset
    G1 z10 F600
    SET_GCODE_OFFSET Z=0 MOVE=1
    BED_MESH_CALIBRATE
    set_meshoffset
    G0 Z50 F600
    G0 X0 Y0 F9000
    M400
    M118 Bed mesh calibrate complete
    SAVE_CONFIG

[gcode_macro M4028]
gcode:
    G28 
    Z_TILT_ADJUST
    G28
    get_zoffset
    M400
    M118 Position init complete
    
[gcode_macro M4029]
gcode:
    M104 S140
    SAVE_VARIABLE VARIABLE=z_offset VALUE=0
    G28 
    M400
    M118 Position init complete

    CLEAR_NOZZLE HOTEND=240
    Z_TILT_ADJUST
    G28
    get_zoffset

[gcode_macro M4030]
gcode:
    BED_MESH_CLEAR
    SET_GCODE_OFFSET Z=0 MOVE=0
    G28
    get_zoffset
    MOVE_PROBE_TO_CENTER
    G1 Z0 F600